/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classes;

import java.io.File;
import javax.swing.JFileChooser;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;


/**
 *
 * @author Abu
 */
public class Datasets extends javax.swing.JFrame {

     Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs;
    public Datasets() {
        initComponents();
    }
public Datasets(String id)
{
     initComponents();
     pid.setText(id);
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        next = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        filepath = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        pid = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 0, 51));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 0));
        jLabel5.setText("Diagnosis: ");

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classes/images/exit.png"))); // NOI18N
        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        next.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classes/images/next.png"))); // NOI18N
        next.setText("Next");
        next.setEnabled(false);
        next.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        next.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        next.setIconTextGap(2);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(51, 0, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Uploading Datasets", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classes/images/select.png"))); // NOI18N
        jButton2.setText("Select");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/classes/images/upload.png"))); // NOI18N
        jButton1.setText("Upload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(filepath, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jButton1)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filepath)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        pid.setEditable(false);
        pid.setBackground(new java.awt.Color(51, 0, 51));
        pid.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        pid.setForeground(new java.awt.Color(255, 255, 0));
        pid.setBorder(null);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pid, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(next)
                                .addGap(22, 22, 22)
                                .addComponent(jButton3))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(131, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(pid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(next, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
         File selectedFile = fileChooser.getSelectedFile();
        filepath.setText(selectedFile.getAbsolutePath());
          
}
    }//GEN-LAST:event_jButton2ActionPerformed
public void Connect()
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con= DriverManager.getConnection("jdbc:mysql://localhost/lung_cancer_detector","root","");
            con.setAutoCommit(false);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Datasets.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     
            try {
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Datasets.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/lung_cancer_detector","root","");
                con.setAutoCommit(false);
                PreparedStatement pst= null;
                
                String query= "DELETE FROM datasets";
                pst= con.prepareStatement(query);
                pst.execute();
             String path=filepath.getText();
             FileInputStream input = new FileInputStream(path);
            Workbook workbook = new XSSFWorkbook(input);
            Sheet sheet = workbook.getSheetAt(0);
            Row row;
              JOptionPane.showMessageDialog(null, "Reading dataset rows...", "Uploading",JOptionPane.INFORMATION_MESSAGE);
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {

                row = sheet.getRow(i);
                String patient_id=row.getCell(0).getStringCellValue();
                int age = (int) row.getCell(1).getNumericCellValue();
                   int gender =(int) row.getCell(2).getNumericCellValue();
                    int air_pollution = (int) row.getCell(3).getNumericCellValue();
                    int alcohol_use= (int) row.getCell(4).getNumericCellValue();
                    int dust_allergy = (int) row.getCell(5).getNumericCellValue();
                    int occupational_hazards = (int) row.getCell(6).getNumericCellValue();
                    int genetic_risk = (int) row.getCell(7).getNumericCellValue();
                    int chronic_lung_disease = (int) row.getCell(8).getNumericCellValue();
                    int balanced_diet= (int) row.getCell(9).getNumericCellValue();
                    int obesity = (int) row.getCell(10).getNumericCellValue();
                    int smoking =(int) row.getCell(11).getNumericCellValue();
                    int passive_smoking = (int) row.getCell(12).getNumericCellValue();
                    int chest_pain= (int) row.getCell(13).getNumericCellValue();
                    int coughing= (int) row.getCell(14).getNumericCellValue();
                    int fatigue = (int) row.getCell(15).getNumericCellValue();
                    int weight_loss = (int) row.getCell(16).getNumericCellValue();
                   int shortness_of_breath = (int) row.getCell(17).getNumericCellValue();
                int wheezing= (int) row.getCell(18).getNumericCellValue();
                int swallowing_difficulty= (int) row.getCell(19).getNumericCellValue();
                int clubbing_of_fingernails = (int) row.getCell(20).getNumericCellValue();
                int frequent_cold = (int) row.getCell(21).getNumericCellValue();
                int dry_cough = (int) row.getCell(22).getNumericCellValue();
                int snoring = (int) row.getCell(23).getNumericCellValue();
                String level=row.getCell(24).getStringCellValue();
                
                
                String sql = "INSERT INTO datasets(patient_id, age, gender,air_pollution,"
                        + "alcohol_use,dust_allergy,occupational_hazards,genetic_risk,"
                        + "chronic_lung_disease,"
                        + "balanced_diet,obesity,smoking,passive_smoking,chest_pain,"
                        + "coughing,fatigue,weight_loss,"
                        + "shortness_of_breath,wheezing,swallowing_difficulty,"
                        + "clubbing_of_fingernails,frequent_cold,"
                        + "dry_cough,snoring,level) VALUES(?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                 pst= (PreparedStatement) con.prepareStatement(sql);
                pst = con.prepareStatement(sql);
                pst.setString(1, patient_id);
                pst.setInt(2,age);
                pst.setInt(3,gender);
                pst.setInt(4,air_pollution);
                 pst.setInt(5,alcohol_use);
                pst.setInt(6,dust_allergy);
                pst.setInt(7,occupational_hazards);
                 pst.setInt(8,genetic_risk);
                pst.setInt(9,chronic_lung_disease);
                pst.setInt(10,balanced_diet);
                 pst.setInt(11,obesity);
                pst.setInt(12,smoking);
                pst.setInt(13,passive_smoking);
                 pst.setInt(14,chest_pain);
                pst.setInt(15,coughing);
                pst.setInt(16,fatigue);
                 pst.setInt(17,weight_loss);
                pst.setInt(18,shortness_of_breath);
                pst.setInt(19,wheezing);
                 pst.setInt(20,swallowing_difficulty);
                pst.setInt(21,clubbing_of_fingernails);
                pst.setInt(22,frequent_cold);
                 pst.setInt(23,dry_cough);
                pst.setInt(24,snoring);
                pst.setString(25,level);
               pst.execute();
        
            }
            con.commit();
            pst.close();
            con.close();
            input.close();
          JOptionPane.showMessageDialog(null,"Dataset uploaded successfully \n Click NEXT to continue.","Success",JOptionPane.INFORMATION_MESSAGE);
          next.setEnabled(true);
        } catch (SQLException ex) {
            Logger.getLogger(Datasets.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Datasets.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
         try {
             int l = 0,m = 0,h = 0,t = 0;
             Connect();
             String low = "low";
             String medium = "medium";
             String high = "high";
             //Get the number of patients with low risk from datasets
             pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE level=?");
             pst.setString(1, low);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 l=Integer.parseInt(rs.getString(1));
             
             //Get the number of patients with medium risk from datasets
             pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE level=?");
             pst.setString(1, medium);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 m=Integer.parseInt(rs.getString(1));
              //Get the number of patients with high risk from datasets
             pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE level=?");
             pst.setString(1, high);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 h=Integer.parseInt(rs.getString(1));
              //Get the total number of patients with low risk from datasets
             pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets");
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 t=Integer.parseInt(rs.getString(1));
            // General probability for the classes
             float l1= (float)l/t;
             float m1= (float)m/t;
             float h1= (float)h/t;
             String id=pid.getText();
             pst=con.prepareStatement("SELECT * FROM diagnosis WHERE patientno=?");
             pst.setString(1, id);
             rs=pst.executeQuery();
              String results = null;
             if(rs.next())
             {
             String age= rs.getString("age");
             String gender=rs.getString("gender");
            
             String air_pollution= rs.getString("air_pollution");
             String alcohol=rs.getString("alcohol_use");
             String dust_allergy=rs.getString("dust_allergy");
             String work_hazard=rs.getString("work_hazard");
             String genetic_risk=rs.getString("genetic_risk");
             String chronic_lung_disease=rs.getString("chronic_lung_disease");
             String balance_diet= rs.getString("balance_diet");
             String obesity=rs.getString("obesity");
             String smoking= rs.getString("smoking");
             String passive_smoking=rs.getString("passive_smoking");
             String chest_pain=rs.getString("chest_pain");
             String weight_loss=rs.getString("weight_loss");
             String breath_shortness= rs.getString("breath_shortness");
             String frequent_cold=rs.getString("frequent_cold");
             String clubbing_finger_nails= rs.getString("clubbing_finger_nails");
             String dry_cough=rs.getString("dry_cough");
             String snoring= rs.getString("snoring");
             String wheezing=rs.getString("wheezing");
             String coughing_blood= rs.getString("coughing_blood");
             String difficult_swallowing=rs.getString("difficult_swallowing");
             String fatigue= rs.getString("fatigue");
             
             float l2,m2,h2;
              
             l2=Bayes(age,gender,air_pollution,alcohol,dust_allergy,work_hazard,genetic_risk,chronic_lung_disease,
             balance_diet,obesity,smoking,passive_smoking,chest_pain,weight_loss,breath_shortness,frequent_cold,
             clubbing_finger_nails,dry_cough,snoring,wheezing,coughing_blood,difficult_swallowing,fatigue,"low");
             
             m2=Bayes(age,gender,air_pollution,alcohol,dust_allergy,work_hazard,genetic_risk,chronic_lung_disease,
             balance_diet,obesity,smoking,passive_smoking,chest_pain,weight_loss,breath_shortness,frequent_cold,
             clubbing_finger_nails,dry_cough,snoring,wheezing,coughing_blood,difficult_swallowing,fatigue,"medium");
             
              h2=Bayes(age,gender,air_pollution,alcohol,dust_allergy,work_hazard,genetic_risk,chronic_lung_disease,
             balance_diet,obesity,smoking,passive_smoking,chest_pain,weight_loss,breath_shortness,frequent_cold,
             clubbing_finger_nails,dry_cough,snoring,wheezing,coughing_blood,difficult_swallowing,fatigue,"high");
              System.out.println(l2);
                System.out.println(m2);
                  System.out.println(h2);
                    System.out.println(l1);
                      System.out.println(m1);
                        System.out.println(h1);
             l2=l2*l1;
             m2=m2*m1;
             h2=h2*h1;
            System.out.println("low risk"+l2);
            System.out.println("medium risk"+m2);
            System.out.println("high risk"+h2);
           
             if(l2>m2&&l2>h2){
                 System.out.println("low risk");
                 results="low";
             }
             else if(m2>l2&&m2>h2)
             {
                  System.out.println("medium risk");
                   results="medium";
             }
             else if(h2>l2&&h2>m2){
                 System.out.println("high risk");
                  results="high";
             }
             else{
                 System.out.println("Diagnosis out of range");
                  results="none";
             }
             }
             else{
                 JOptionPane.showMessageDialog(null,"Error");
             }
            
             Results rs = new Results(results,id);
             rs.setVisible(true);
             this.dispose();
         } catch (SQLException ex) {
             Logger.getLogger(Datasets.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_nextActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Main m = new Main();
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    public static float Bayes(String age, String gender,String air_pollution,String alcohol,String dust_allergy,
        String work_hazard,String genetic_risk,String chronic_lung_disease,String balance_diet,String obesity,String smoking,String passive_smoking,
        String chest_pain,String weight_loss,String breath_shortness,String frequent_cold,String clubbing_finger,String dry_cough,String snoring,
        String wheezing,String coughing_blood,String difficult_swallowing, String fatigue,String risk)
{
    float result=0;
         try {
             
             Connection con = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/lung_cancer_detector","root","");
             PreparedStatement pst= null;
             ResultSet rs=null;
             int a=0, g=0,ap=0, al=0,d_a=0,w_h=0,g_r=0,c_l=0,b_d=0,o=0,sm=0,p_s=0,c_p=0,w_l=0,b_s=0,f_c=0,c_f=0,d_c=0,sn=0,w=0,c_b=0,d_s=0,f=0,r=0;
            
             pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE age=?");
             pst.setString(1, age);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 a=Integer.parseInt(rs.getString(1));
             if(a==0){
                 a++;
             }
             else{
                 a=a;
             }
               System.out.println("age "+a);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE gender=?");
             pst.setString(1, gender);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 g=Integer.parseInt(rs.getString(1));
              if(g==0){
                 g++;
             }
              
             else{
                 g=g;
             }
                  System.out.println("gender "+g);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE air_pollution=?");
             pst.setString(1, air_pollution);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 ap=Integer.parseInt(rs.getString(1));
              if(ap==0){
                 ap++;
             }
             else{
                 ap=ap;
             }
                 System.out.println("air p "+ap);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE alcohol_use=?");
             pst.setString(1, alcohol);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 al=Integer.parseInt(rs.getString(1));
              if(al==0){
                 al++;
             }
             else{
                 al=al;
             }
                  System.out.println("alchol "+al);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE dust_allergy=?");
             pst.setString(1, dust_allergy);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 d_a=Integer.parseInt(rs.getString(1));
              if(d_a==0){
                 d_a++;
             }
             else{
                 d_a=d_a;
             }
                 System.out.println("dust all "+d_a);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE occupational_hazards=?");
             pst.setString(1, work_hazard);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 w_h=Integer.parseInt(rs.getString(1));
              if(w_h==0){
                 w_h++;
             }
             else{
                 w_h=w_h;
             }
              System.out.println("occ hazards "+w_h);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE genetic_risk=?");
             pst.setString(1, genetic_risk);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 g_r=Integer.parseInt(rs.getString(1));
              if(g_r==0){
                 g_r++;
             }
             else{
                 g_r=g_r;
             }
               System.out.println("genetic "+g_r);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE chronic_lung_disease=?");
             pst.setString(1, chronic_lung_disease);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 c_l=Integer.parseInt(rs.getString(1));
              if(c_l==0){
                 c_l++;
             }
             else{
                 c_l=c_l;
             }
               System.out.println("chronic "+c_l);
             pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE balanced_diet=?");
             pst.setString(1, balance_diet);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 b_d=Integer.parseInt(rs.getString(1));
              if(b_d==0){
                 b_d++;
             }
             else{
                 b_d=b_d;
             }
               System.out.println("balance "+b_d);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE obesity=?");
             pst.setString(1, obesity);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 o=Integer.parseInt(rs.getString(1));
              if(o==0){
                 o++;
             }
             else{
                 o=o;
             }
               System.out.println("occ hazards "+w_h);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE smoking=?");
             pst.setString(1, smoking);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 sm=Integer.parseInt(rs.getString(1));
              if(sm==0){
                 sm++;
             }
             else{
                 sm=sm;
             }
               System.out.println("smoking "+sm);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE passive_smoking=?");
             pst.setString(1, passive_smoking);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 p_s=Integer.parseInt(rs.getString(1));
              if(p_s==0){
                 p_s++;
             }
             else{
                 p_s=p_s;
             }
               System.out.println("pasive smoking "+p_s);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE chest_pain=?");
             pst.setString(1, chest_pain);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 c_p=Integer.parseInt(rs.getString(1));
              if(c_p==0){
                 c_p++;
             }
             else{
                 c_p=c_p;
             }
               System.out.println("chest pain "+c_p);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE weight_loss=?");
             pst.setString(1, weight_loss);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 w_l=Integer.parseInt(rs.getString(1));
              if(w_l==0){
                 w_l++;
             }
             else{
                 w_l=w_l;
             }
               System.out.println("weight loss "+w_l);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE shortness_of_breath=?");
             pst.setString(1, breath_shortness);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 b_s=Integer.parseInt(rs.getString(1));
              if(b_s==0){
                 b_s++;
             }
             else{
                 b_s=b_s;
             }
               System.out.println("shortness "+b_s);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE frequent_cold=?");
             pst.setString(1, frequent_cold);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 f_c=Integer.parseInt(rs.getString(1));
              if(f_c==0){
                 f_c++;
             }
             else{
                 f_c=f_c;
             }
               System.out.println("frequent "+f_c);
             pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE clubbing_of_fingernails=?");
             pst.setString(1, clubbing_finger);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 c_f=Integer.parseInt(rs.getString(1));
              if(c_f==0){
                 c_f++;
             }
             else{
                 c_f=c_f;
             }
               System.out.println("clubbing "+c_f);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE dry_cough=?");
             pst.setString(1, dry_cough);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 d_c=Integer.parseInt(rs.getString(1));
              if(d_c==0){
                 d_c++;
             }
             else{
                 d_c=d_c;
             }
               System.out.println("dry "+d_c);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE snoring=?");
             pst.setString(1, snoring);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 sn=Integer.parseInt(rs.getString(1));
              if(sn==0){
                 sn++;
             }
             else{
                 sn=sn;
             }
               System.out.println("snoring "+sn);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE wheezing=?");
             pst.setString(1, wheezing);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 w=Integer.parseInt(rs.getString(1));
              if(w==0){
                 w++;
             }
             else{
                 w=w;
             }
               System.out.println("wheezing "+w);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE coughing=?");
             pst.setString(1, coughing_blood);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 c_b=Integer.parseInt(rs.getString(1));
              if(c_b==0){
                 c_b++;
             }
             else{
                 c_b=c_b;
             }
               System.out.println("coughing "+c_b);
              pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE swallowing_difficulty=?");
             pst.setString(1, difficult_swallowing);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
                 d_s=Integer.parseInt(rs.getString(1));
              if(d_s==0){
                 d_s++;
             }
             else{
                 d_s=d_s;
             }
               System.out.println("difficulty "+d_s);
             pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE fatigue=?");
             pst.setString(1, fatigue);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
             f=Integer.parseInt(rs.getString(1));
              if(f==0){
                 f++;
             }
             else{
                 f=f;
             }
              System.out.println("fatique "+f);
            pst=con.prepareStatement("SELECT COUNT(patient_id) FROM datasets WHERE level=?");
             pst.setString(1, risk);
             pst.executeQuery();
             rs=pst.getResultSet();
             if(rs.next())
             r=Integer.parseInt(rs.getString(1));
             System.out.println("level "+r);
            result=(float)a/(float)r * (float)g/(float)r * (float)ap/(float)r * (float)
                     al/(float)r * (float)d_a/(float)r * (float)w_h/(float)r * (float)g_r/
                     (float)r * (float)c_l/(float)r *(float)b_d/(float)r * (float)o/(float)r 
                     * (float)sm/(float)r * (float)p_s/(float)r * (float)c_p/(float)r * (float)
                     w_l/(float)r * (float)b_s/(float)r * (float)f_c/(float)r * (float)c_f/(float)
                     r * (float)d_c/(float)r * (float)sn/(float)r * (float)w/(float)r * (float)c_b/
                    (float)r * (float)d_s/(float)r * (float)f/(float)r;
             
         } catch (SQLException ex) {
             Logger.getLogger(Datasets.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    return result;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Datasets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Datasets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Datasets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Datasets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Datasets().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField filepath;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton next;
    private javax.swing.JTextField pid;
    // End of variables declaration//GEN-END:variables
}
